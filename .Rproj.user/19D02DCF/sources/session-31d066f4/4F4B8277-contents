library(shiny)
library(ggplot2)

# Create a placeholder dataset
cook_data <- data.frame(
  age = sample(18:50, 100, replace = TRUE),
  `cooking skills` = sample(1:10, 100, replace = TRUE),
  Gender = sample(c("Male", "Female"), 100, replace = TRUE),
  Marital_Status = sample(c("Married", "Single", "Divorced"), 100, replace = TRUE)
)

# Define UI
ui <- fluidPage(
  titlePanel("Cooking Skills and Age by Gender"),
  sidebarLayout(
    sidebarPanel(
      sliderInput("age_range", "Select Age Range:",
                  min = 18, max = 50, value = c(18, 50)),
      selectInput("marital_status", "Select Marital Status", choices = c("All", "Married", "Single", "Divorced"), selected = "All")
    ),
    mainPanel(
      plotOutput("scatterplot")
    )
  )
)

# Define server logic
server <- function(input, output) {
  output$scatterplot <- renderPlot({
    # Filter data based on selected age range
    filtered_data <- subset(cook_data, age >= input$age_range[1] & age <= input$age_range[2])
    
    # Filter data based on selected marital status
    if (input$marital_status != "All") {
      filtered_data <- subset(filtered_data, Marital_Status == input$marital_status)
    }
    
    # Create scatter plot
    ggplot(filtered_data, aes(x = age, y = `cooking skills`, color = Gender)) +
      geom_point() +
      scale_y_continuous(breaks = seq(1, 10, by = 1)) + # Set y-axis breaks from 1 to 10 with single unit increments
      scale_x_continuous(breaks = seq(18, 50, by = 2)) +
      labs(x = "Age", y = "Cooking Skills") +
      scale_color_manual(values = c("Male" = "blue", "Female" = "red")) + # Set colors for Male and Female
      theme_minimal()
  })
}

# Run the application
shinyApp(ui = ui, server = server)


